개념정리


-함수

  function 함수명 (...) {
    //연산이 처리되는 부분

    return 반환값(함수명)
  }
  
  ex)

  function sum(x) {
    const result = x * 2 + 2;
    return result; 
  }

  함수를 사용하는 방법?
  ㄴ 함수명() / 함수명(값, 값...)

  ex) sum(2);
      =6  
  ------------------------------------

  변수의 끌어올림

  함수의 끌어 올림 - 함수의 정의된 위치를 상관 없이 쓸수있다.

  ex) sum (2); 

  function sum(x) {
      const result = x * 2 + 2;
      return result;
  }
  =6
  ------------------------------------

  함수의 인수 -> 생략이 가능
  반환값 -> 생략이 가능
         -> 반환값 생략시 return undefined 가 자동 추가.


  ex function bark () {
      console.log("멍멍")
      -> return undefined; 가 자동 추가.
  }

  const result = bark();
  =멍멍

  result;
  = undefined

  ------------------------------------

  함수가 호출되는 메모리 영역

  메모리 
  ㄴ1. 데이터 영역 - 작성한 소스 
    2. 스택 영역 - 함수가 실행이 되면 올라가는 영역
    3. 힙영역 - 객체를 생성하면 올라가는 영역
  
  stack -> 예로 10 / 100 / 1000 쌓았을시 1000을 제일 먼저 꺼낼수있고 10을 가장 나중에 꺼낼수 있다.
  queue - > 10을 제일 먼저 , 100 , 1000 순으로 꺼낼수 있다.

  ex) sum() 호출시, stack 의 제일 바닥에 쌓인다. 실행이 완료되었을시, 메모리(stack)영역에서 제거된다.


  전역변수 

  지역변수 - 함수 내에서만 유효한 변수
  ex) function sum () {
       //  const a = 10;
          const b = 20; // 지역변수 sum 내에서만 유효한 변수.
  }

  함수 내부에 정의된 a,b -> 함수가 실행되는 동안에만 메모리에 있으므로 
                            함수의 실행이 끝나면 메모리에서 제거가 된다.
                            함수가 실행되는 동안에만 유효한 변수
  
  자바스크립트 함수 -> 1급 객체 
    1. 인수를 함수로 쓸 수 있다.

    2. 함수를 반환 값으로 쓸 수 있다.


  ex)
    function outerFunc() {
      
      return function innerFunc() {
          console.log("innerFunc"); // <-- VM1491:4
      };
  }
  undefined //  <- 지역변수 호출 끝, 메모리 삭제. 하지만 innerFunc 미호출 상태. 
  const func = outerFunc();
  undefined // <- 지역변수 삭제되어 불러올 수 없음. innerFunc 미호출 상태.
  func();
  VM1491:4 innerFunc // 마지막 호출 -> 아직 남아있음 innerfunc 호출.
  undefined



  -------------------------------------------
  function 브라우저의 메인 함수 () {

    function testFunc() {

    }
  }

  stack -> 1. 브라우저의 메인 함수 2. testFunc ()

  function 브라우저의 메인함수 () {
      const global = "global"

      function testFunc() {
        const local = "local"
      };
  }

  function testFunc() {
    innerFunc();
  }

  const innerFunc = function() {
      console.log("innerFunc");
  };
  undefined
  testFunc(innerFunc);
  VM332:6 innerFunc


  function testFunc() {
    innerFunc();
  }


  function testFunc(innerFunc) {
      const event = "이벤트"; // 
      innerFunc(event); // event 가 innerFunc에 대입.
  }
  undefined
  testFunc(function(event) { 
      console.log(event); // const event 대입
  });
  VM870:2 이벤트 // 결과로 이벤트가 나옴.

  -----------------------------------------

  function innerFunc() {

  }

  --> 함수의 끌어올림 되므로 호출 위치는 상관 없다.

  1. 

  const innerFunc = function() {

  }

  --> 함수의 끌어올림이 안된다, 호출은 바로 다음부터 가능.

  1. const innerFunc; -> 선언
  2. window.innerFunc = undefined; 자동 대입
  3. const innerFunc = function() 함수가 대입

  -----------------------------------------------

  함수를 즉시 실행 하는 법

  (function() {
    alert("즉시실행"); // 즉시 실행할 영역
  })(); // <-- 필수 적용

  1. 인수 적용 가능

  (function(a,b) {
    console.log(a+b);
  })(2,3);
  = 5

  2. 반환값 사용 가능
  (function(a,b) {
    return a + b;
  })(2,3);

  ---------------------------------

  -가변 인수

  function testFunc(a, b) {
        console.log(arguments);
  }

  function testFunc() {
    let str = "";
    for(let i = 0; i < arguments.length; i++) {
        str += arguments[i] + ",";
    }

    return str;
  }
  testFunc(1,2,3,4,5,6,7,8;
  = "1,2,3,4,5,6,7,8"

  2) ...인수 
    -가변인수 갯수 상관없이 입력할 수 있는 갯수
    function testFunc(...str) {
    console.log(str);
    }
    testFunc(1,2,3,4);
    (4) [1, 2, 3, 4]


  function testFunc(seperator, ...str) {
    console.log(str);
  }
  testFunc("/", "apple", "mango", "banana", "orange");
  (4) ["apple", "mango", "banana", "orange"]



  function testFunc(seperator, ...str) {
      console.log(seperator);
      console.log(str);
  }
  testFunc("/", "apple", "mango", "banana", "orange");
  VM2845:2 /
  VM2845:3 (4) ["apple", "mango", "banana", "orange"]


  -객체 Object

  this. -> 객체가 있다고 가정함.

  function Person (name, age, gender) {
    this.name = name; // name 의 주소
    this.age = age; // age 의 주소 
    this.gender = gender; // gender 의 주소
    this.study = function() {
        console.log("공부한다.");
    }
  };
  undefined
  const person1 = new Person("이름1", 30, "F");
  undefined // 스택 저장
  const person2 = new Person("이름2", 41, "M");
  undefined // 스택 저장
  const person3 = new Person("이름3", 24, "M");
  undefined // 스택 저장
  person1;
  Person {name: "이름1", age: 30, gender: "F", study: ƒ}
  person2;
  Person {name: "이름2", age: 41, gender: "M", study: ƒ}
  person3;
  Person {name: "이름3", age: 24, gender: "M", study: ƒ}

  생성자(객체)의 구성 

  - prototype
    ㄴ constructor - 생성자 함수의 원형 new: 연산자를 통해 생성이 가능
       __proto__ - 객체의 상속 관계

  -property,method -> tcpschool 참조하기
  
  표준 객체 , 객체 다루기


  **** 참고하기 tcpschool.com/javascript/js_standard_number_Method **** 

  - Number 객체
   
   1) 정수 (소수점이 없는 수)
    integer 

   2) 실수 (소수점이 있는 수)
    float 

    useable methods

    parseFloat() 문자열을 파싱하여 문자열에 포함된 숫자 부분을 신수 형태로 반환
      혹은 문자열에 여러개의 숫자가 존재하면 그장 첫 번째 숫자만을 실수 형태로 반환

      ex) Number.parseFloat("12"); 
          -> 12 
          Number.parseFloat("12.34");
          -> 12.34
          Number.parseFloat("12문자열");
          -> 12
          Number.parseFloat("12 34 56");
          -> 12
          Number.parseFloat("문자열123");
          -> NaN

    parseInt() 문자열을 파싱하여 문자열에 포함된 숫자 부분을 정수 형태로 반환합니다.
      문자열에 여러 개의 숫자가 존재하면, 그중에서 첫 번째 숫자만을 정수 형태로 반환

      ex) Number.parseInt("12");
          -> 12 
          Number.parseInt("12.34");
          -> 12 
          Number.parseInt("12문자열");
          -> 12
          Number.parseInt("12 34 56");
          -> 12
          Number.parseInt("문자열123");
          -> NaN

    isNaN() 잔달된 값이 NotanNumber 인지 아닌지를 검사

      ex) Number.isNaN(NaN);
          -> true
          Number.isNaN(0 / 0);
          -> true 
          Number.isNaN("NaN");
          -> false
          Number.isNaN("문자열");
          -> false

    isFinite() 전달된 값이 유한한 수인지 아닌지를 검사

      ex) Number.isFinite(0);
          -> true
          Number.isFinite(3e45);
          -> true
          Number.isFinite(Infinity);
          -> false
          Number.isFinite(NaN);
          -> false

    isInteger() 전달된 값이 정수인지 아닌지를 검사 

      ex) Number.isInteger(0);
          -> true
          Number.isInteger(-100);
          -> true
          Number.isInteger(0.1);
          -> false
          Number.isInteger("문자열");
          -> false

    toFixed(자리수) 전달된 값이 소수일때 지정한 자리수만큼 잘라서 문자열로 반환

      ex) Number.toFixed(2);
          -> 12.12

    -------------------------------------------------


  - Boolean

    -------------------------------------------------

  - Math 
  수학과 관련된 생성자

  Math.abs() -> 절대값
                음수 - 양수 
                양수 - 음수

    ex) Math.abs()

  Math.round() 전달받은 값을 소수점 첫 번째 자리에서 반올림하여 반환 (반올림)

    ex) Math.round(10.49);
        -> 10
        Math.round(10.5);
        -> 11 


  Math.floor() 전달받은 값과 같거나 작은 수 중에서 가장 큰 정수를 반환 (내림)

    ex) Math.floor(10.95);
        -> 10
        Math.floor(11.01);
        -> 11

  Math.ceil() 전달받은 값과 같거나 큰 수 중에서 가장 작은 정수를 반환 (올림)

    ex) Math.ceil(10.95)
        -> 11
        Math.ceil(11.01)
        -> 12

  .....for more -> tcpschool 참조


  ------------------------------------------------

 - Date 객체 
  
  날짜와 시간을 다루는 생성자
  생성을 하면 현재 시간을 출력 할 수 있다

  .getFullYear() ----> 연도 // 2021 
  .getMonth() ----> 월 (0 - 1월 ~ 11 - 12월)
  .getDate() ----> 날짜 
  .getHours() ----> 시간
  .getMinutes() ----> 분
  .getSeconds() ----> 초
  .getDay() ---> 요일 (0 - 일요일 ~ 6 - 토요일)

 --------------------------------------------------

 -Array 

  배열 생성자

  const a = 1;
  const b = 2;

  값을 여러개 담을때 쓰는 객체

  값을 담기 위해서는 배열 객체를 생성해야 한다.

  1. new 연산자를 통해서 생성
     생성자 인수로 값을 여러개 할당

     const a = new Array(1);

     공간 배열 1개 생성

     인수 1개 - 값으로 인식하는것이 아니라 배열의 공간 갯수로 인식
     (인수가 1개 -> 반드시 숫자(양수)   음수(-1), 문자("a,b,c") -> 오류

  2. 대괄호 연산자[]를 통해서 생성

    const a = [1]; 
    공간 배열 1개 생성


  3. 배열은 각 요소의 순서 번호가 자동으로 생성이 된다

  4. 순서 번호에 따라 접근을 하려면 대괄호 -- 배열변수[순서번호]

  const a = ["apple", "orange", "mango"];
  undefined // 대입
  a;
  (3) ["apple", "orange", "mango"]
  a[0];
  "apple"

  5. 배열 객체

  객체 구성

  { 
    속성:값
    속성:값
  }


  ["apple", "orange", "mango"]

  {
    "0":"apple",
    "1":"orange",
    "2":"mango"
  }

  접근 대활호 [순서 번호 - 인덱스 번호]로 접근

  배열 데이터를 변경
  -이미 있는 인덱스 번호의 값에 대입을 하면 변경

  a[1] = "변경할값";

  ex) a[1] = "water melon";

  -> ["apple", "water melon", "mango"]

  배열 데이터를 추가
  -없는 인덱스에 값을 대입하면 추가

  a[3] = "추가할 값";

  ex) a[3] = "pineapple"
  -> ["apple", "orange", "mango", "pineapple"]    

  .push() - 배열의 끝에 추가
  .unshift() - 배열의 앞에 추가 

  배열 데이터를 삭제
  -기존 인덱스 값에 delete 를 대입

  delete 배열변수[인덱스번호]; 

  ex) delete a[2];
  ->["apple", "water melon", empty, "pineapple"]

    .pop() - 배열의 마지막 요소를 삭제
    .shift() - 배열의 첫번째 요소를 삭제

  removed; - 마지막 삭제 인덱스 확인



