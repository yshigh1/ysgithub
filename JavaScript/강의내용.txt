1. 자바스크립트

  사용자와 상호작용하는 동작을 통제하는 역할을 한다.

  - 자바스크립트의 구성
   브라우저 
  - 자바스크립트를 해석해 주는 역
  - 자바스크립트 런타임
  - 자바스크립트 코어 (ECMAScript)
  - 브라우저 객체 모델
  ㄴ 브라우저에서만 제공되는 기능 모음

  - Node.js 
  - 자바스크립트를 해석해주는 역할(서버 쪽에서 해석)
  - 자바스크립트 런타임
  - 자바스크립트 코어(ECMAScript)
  - Node.js 내장 모듈

2. 실습환경

  - 브라우저 콘솔
  option + command + I (개발자모드)
  console > 변수의 값 , 객체의 값
  console.log > 단순 메세지, 값 출력
  console.dir > 갹체를 구조화 하여 확인 할때
  consile.error > 에러 형태로 값을 출력

  - Node.js 콘솔 또는 파일 실행

  - HTML 웹페이지를 만들어 실행 (이벤트, HTML을 다루는 기능)
  <script> 자바스크립트 코드 </script>
  <script src="외부 자바스크립트 파일"></script>

3. 자바스크립트 주석

  -소스를 숨김처리, 실행을 중단
  -소스에 대한 설명
  ㄴ 1) 줄 주석 > // ~ 
     2) 여러 줄 주석 > /* ~ */

4. 변수(variable)


  - 변경 할 수 있는 값을 담는 공간
  - 값을 기억하기 위한 공간 > 메모리
  - 변수라고 알려주기 위한 방법
  - var 선언자를 붙여 주면 변수가 된다 
  ㄴ ex) var a -> 변수 a 이고 a 라는 저장 공간
  ㄴ 프로그래밍에서 "=" 는 값을 대입한다 (오른쪽에 있는 값을 a 라는 공간에 저장한다)

  - var a = 1;
    a 라는 변수를 선언하고 1 이라는 값을 변수에 저장한다
    (초기화 - 선언과 동시에 값을 대입)

    var a; -> 선언 
    a = 1; 대입 
    working -> 먼저 var a = undefined; 대입됌. (undefined가 기본값이기 때문에)
               이후 a = 1; a 는 1 이라는 값을 대입하여 var a = 1; 이 됀다.

    변수를 여러개 선언 

    var a,b,c;
    var a = 1, b = 2, c = 3;

    변수의 명명 규칙

    1) 사용할 수 있는 문자
      a. 알파벳 (대문자,소문자)
      b. 숫자 (0~9)
      c. 밑줄(_)
      d. 달러 기호 ($)

    2) 숫자는 변수의 첫번째 문자로 올 수 없다.

    3) 예약어는 쓸 수 없다.
      자바스크립트 내에서 이미 기능적으로 사용되는 키워드
      ㄴ ex) for, new, while ...typeof, ...instance

    변수에 저장할 수 있는 자료형 

    1) 원시 타입
      - 숫자
      - 문자("string")
      - 논리값 (true, false)

       var a = true;
       typeof a = boolean 
       boolean = 논리값 

       false로 인식 하는 경우
       -
      - null -> 값이 없는 상태
      - undefined -> 값이 정의되어 있지 않은 상태 (변수를 선언만 한 상태)

      - typeof = 자료형을 체크하는 연산자 
       ex) typeof = a -> "undefined", "string"(숫자) , boolean(논리값)

    2) 객체

      자바스크립트 - 원시타입 + 객체

      변수를 선언하면 window 하위 객체 속성으로 정의가 된다.

      브라우저 객체 모델 -> 최상위 객체 (window)

      새탭 -> 
      var a = 1; 선언시 
      이미 새탭에는 window 객체가 최상위에 있기때문에
      a = 1; 는 window 하위 객체 속성으로 정의된다.

      - console.log(a);
      var a = 1;

      -> window.a = undefined;
      -> console.log(a);
      -> a = 1; 
      의 순서로 적용된다
      



  * 참고
  1) 문장의 끝은 항상 ; (세미콜론) 으로 끝난다.    

5. 연산자

  1) 산술 연산자
  -사칙연산
  더하기(+)
  빼기(-)
  곱하기(*)
  나누기(/)
  나머지(%) -> 나머지를 구하는 연산자 ex) 5 % 3 -> 나머지는 2 

  2) 문자 결합 연산자
  "string" + "string"

  ex) var school1 = "연희"
      var text = school1 + "직업전문학교" 
      text = "연희직업전문학교" 

  3) 대입연산자(=)
  수학에서 = 는 ~와 같다 지만
  프로그래밍에서 = 는 대입 이다.

  ex) var a = 1;
      1 이라는 값을 a 라는 변수에 대입(저장)한다(오른쪽 값을 왼쪽에 대입(저장))
  
  4) 복합대입연산자
  산술 연산자 + 대입 연산자가 축약된 표현

  ex) var a = 1;
      var b = 2;
      a = a + b; ==== a += b; 
      a = a * b; ==== a *= b;
      a = a / b; ==== a /= b;
      a = a - b; ==== a -= b;
      a = a % b; ==== a %= b;

 5) 증감연산자
 증가, 감소와 관련된 연산자

 ex) 증가
     var a = 1;
     a = a + 1; // a = 2 ---> a++;
     a = a + 1; // a = 3 ---> a++;
     a = a + 1; // a = 4 ---> a++;

     감소 
     var a = 10;
     a = a - 1; // a = 9 ---> a--;
     a = a - 1; // a = 8 ---> a--;
     a = a - 1; // a = 7 ---> a--;


  ++a; -> var b = ++a;
        1) 연산 먼저 
        a = a + 1;
        2) 대입
        b = a;

  a++; -> var b = a++;
        1) 대입 먼저
        b = a;
        2) 연산
        a = a + 1; 

  ex) 2씩 증가 (복합 대입 연산자)
  a = a + 2; // a += 2;

  6) 비교 연산자
  두 값을 비교
  크다, 크거나 같다, 작다, 작거나 같다, 같다

  A > B,  A >= B, A < B, A <= B, == 

  다르다 
  - 값이 다르다 (!)
  - 값이 다르거나 자료형이 다르다 (!==)


  7) 논리 연산자

  || -> OR 연산자 
     모두 false 여야 false

     true 조건인 값을 반환 (논리값 반환 X)

     false 인 조건
     논리값 false, 0, ""(빈값), null, undefined

     참 || 거짓 -> 참 (앞의 값이 참이면 참)

     참 || 참 -> 참 (모두 참이면 앞의 값의 참을 사용)

     거짓 || 참 -> 참 (앞의 값이 거짓이라도 뒷값이 참이면 뒷값의 참을 사용)

  && -> AND 연산자(교집합)
     비교 대상 2 종 모두가 true -> true, 한개라도 false 이면 false

  ! -> NOT 연산자(교집합)
      true -> false, false -> true 로 변환


  8) 삼항조건연산자

    - 1항 (단항)
    연산 대상이 1개
    ㄴ 증감 연산 
      a++;, a--;
       
       논리 부정
      !a; 

       복합 대입 연산자
      A+=2;

    - 2항 (이항)
    연산 대상이 2개
    ㄴ a + b 
       a * b 

    - 3항 (삼항)
    연산 대상이 3개
       1항        2항           3항
    (조건식) ? 참일때 값 : 거짓일 때 값;

    ex) (1000 > 100)?"크다":"작다"
        = "크다"

    조건식이 참이면 참일때 값(왼쪽) 반환
    조건식이 거짓이면 거짓일때 값(오른쪽) 반환


  9) 연산자의 우선순위
    
    1. ()
      
	   1 + 3 * 10 -> 31
	  (1 + 3) * 10 -> 40 

    2. 단항연산자

	  ++a, b--;
	  1 + a++;

    3. 산술연산자 

    + - / * % - 나머지

    4. 비교연산자

    5. 논리

    6. 대입(우선 순위가 가장 낮다)

      var a = b + a;

6. 제어문

  - 조건문

    조건식 - 비교, 논리연산자

    if (조건식) {
      //if 조건식이 참 일때 실행되는 영역
    }

    if (조건식) {
      //if 조건식이 참일때 실행 
    } else { 
      //if 조건식이 거짓일때 실행
    }

    조건식이 여러개 인 경우

    if (조건식1) {
      //if 조건식이 참 일때 실행
    } else if (조건식2) {
      // 조건식1이 거짓이고 조건식2가 참일때 실행 영역
    } else if (조건식3) {
      // 조건식1, 조건식2가 거짓, 조건식3이 참 일때 실행되는 영역
    } else {
      // 모든 조건이 거짓일때 실행 되는 영역
    }

    조건식을 여러개 비교 ---> 논리연산자와 결합

    if (조건식1 || 조건식2) { //조건식1 또는 조건식2가 참이면
    
    }

    || OR 조건 인 경우 우선순위 유의 
    true 를 결정하는 우선 순위가 앞쪽 부터 체크 되므로
    ()로 우선순의를 높여주고 연산


  
  - 선택문 

    선택을 하는 구문

    switch(키워드) {
      case "키워드1" :
      처리할 영역
      case "키워드2" :
      처리할 영역 
    }

    참고 

    var city = '거제'; 
    switch(city) {
        case "인천" :
      console.log("인천에 거주");
        brake; // 원하는 선택이 나왔을때 멈추는 기능
        case "서울" :
      console.log("서울에 거주");
        brake;
        case "경기도" :
      console.log("경기도에 거주");
        brake;
        default : // case 와 매칭되지 않았을때 
        console.log("매칭되는 도시가 아닙니다.");
    }


  - 반복문

  반복을 할때 쓰는 구문
  ㄴ반복을 위한 조건식이 필수 

  -while문

    while(조건식) {
      //조건식이 참일때 반복이 되는 영역
    }

    var a = 0;
      while (a < 100) {
      a++;
      if (a < 50) {
      brake; // 50 이 넘으면 반복 종료
      }
      console.log(a);
    }

    continue -- 반복 건너뜀 (현재의 반복을 중단하고 다시 새로 반복)

    var = 0;
    while(a < 100) {ㄷ
      a++;
      if (a % 2 == 1) {
        continue;
      }
      console.log(a);
    }

    짝수 0,2,4,6,8,10... 2로 나누어 지는 수
    -> 2로 나우었을때 나머지가 0
    a % 2 == 0 -> 짝수
    
    홀수 1,3,5,7,9,11... 2로 나누면 나머지가 1
    a % 2 == 1 -> 홀수


  -do~while문

    do {
      //조건식이 참일때 반복이 되는 영역
    } while {조건식}

    -> 우선 먼저 시도하고 조건식에 따라서 반복
    -> 최소한 1번은 실행 된다
    -> 최소한 1번은 무조건 실행이 되어야 하는 경우
    

  -for문 

    for(초기값;조건식;증감식) {
      //조건식이 true 일때 반복되는 영역
    }

    ex) for (var a = 0; a < 10; a++;) {
          console.log(a);
    }

  반복문 안에 반복문을 사용할 수 있다.

    for(...) {
        for(...) {

        }
    }
   ------------------------------------------------
    반복문 while , for 연습

    1) 1 ~ 100까지의 합 

    while ex) 

    var total = 0;
    var i = 1;
    while(i <= 100) {
      total+= i;
      i++;
    }
  
    for ex)

    var total = 0;
    for(var i = 1; i <= 100; i++) {
      total += i; // total = total + i;
    }


    2) 1 ~ 100까지의 짝수의 합

    while ex)

    var total = 0; 
    var i = 1;
    while(i <= 100) {
      if (i % 2 == 1) {
        i++;
        continue;
      }
      total += i; // total = total + i;
      i++;
    }
    
    for ex)

    var total = 0;
    for(var i = 1; i <= 100 i++) {
      if (i % 2 == 1) {
        continue;
      }
      total += i;
    }
  


    3) 구구단 1,3,5,7,9 단을 출력 하시오.

    while ex)
  
    var i = 1;
    while (i <= 9) {
      if (i % 2 == 0) {
        i++;
        continue;
      }

      var j = 1;
      while (j <= 9) {
        console.log(i + " X " + j + " = " + i * j);
        j++;
      }
      console.log("-------------------------------");
      i++;
    }

    for ex)

    for (var i = 1; i <= 9; i++) {
      if (i % 2 == 0) { 
        continue;
      }
      for (var j = 1; j <= 9; j++) {
        console.log(i + " X " + j + " = " + i * j);
      }
      console.log("-------------------------------------------")
    }

7. 기타

  1. 문자 결합 연산자(+)
    문장을 여러개 결합
    
    역따옴표(` - 백틱) 
    
    템플릿 리터럴
    
    var a = "안녕하세요
      반갑습니다"; ---> 에러 발생
      
    var a = `안녕하세요
      반갑습니다`; --> 정상 인식
      
    
    템플릿 리터럴 - 보간 표현법
      변수의 값, 함수 호출을 문장에 그대로 포함이 가능한 방식
      
    문자 결합 연산자 방식
    var a = 1;
    var b = 2; 
    var c = a + " 더하기 " + b + "는 " + a + b;
    
    템플릿 리터럴 - 보간 표현법
    ${변수명}
    var a = 1;
    var b = 2; 
    var c = `${a} 더하기 ${b} 는 ${a+b}`;
    
    
  2. 변수 선언자
    var - 변수 선언자
    
    let  - var과 거의 동일
        유효한 범위에서 차이가 있다
        (중괄호 안에서만 유효한 범위 { })
        
    const - constants - 상수(변하지 않는 값)

8. 객체(Object/사물)

  사물(대상)간의 상호작용